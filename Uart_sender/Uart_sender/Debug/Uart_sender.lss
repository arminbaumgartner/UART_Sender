
Uart_sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bba  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000419  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000533  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000129  00000000  00000000  0000243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_26>
  6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_27>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 ea       	ldi	r30, 0xA8	; 168
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a8 30       	cpi	r26, 0x08	; 8
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  e2:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <init_usart>:

void daten_senden(void);

void init_usart (void)
{
	UBRR1H = (unsigned char)(UBRR_CALC>>8); //Baudrate einstellen
  ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (unsigned char)(UBRR_CALC);
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = UCSR1B | (1<<TXEN1);	//Sender ein
  f4:	e9 ec       	ldi	r30, 0xC9	; 201
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	UCSR1B = UCSR1B | (1<<RXEN1);	//empfang ein
  fe:	80 81       	ld	r24, Z
 100:	80 61       	ori	r24, 0x10	; 16
 102:	80 83       	st	Z, r24
	UCSR1B = UCSR1B | (1<<TXCIE1);	//Sende-Interruput ein
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	//UCSR1B = UCSR1B | (1<<UDRIE1);	//Buffer-Interrupt ein
	//UCSR1A = UCSR1A | (1<<UDRE1);
	
	UCSR1C = UCSR1C &~ (1<<UMSEL10);	//asynchr.
 10a:	ea ec       	ldi	r30, 0xCA	; 202
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8f 7b       	andi	r24, 0xBF	; 191
 112:	80 83       	st	Z, r24
	UCSR1C = UCSR1C &~ (1<<UMSEL11);
 114:	80 81       	ld	r24, Z
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C &~ (1<<UPM10);		//even parity
 11a:	80 81       	ld	r24, Z
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	80 83       	st	Z, r24
	UCSR1C = UCSR1C | (1<<UPM11);
 120:	80 81       	ld	r24, Z
 122:	80 62       	ori	r24, 0x20	; 32
 124:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C &~ (1<<USBS1);		//1-Stop-Bit
 126:	80 81       	ld	r24, Z
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C | (1<<UCSZ10);		//8-Bit data
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
	UCSR1C = UCSR1C | (1<<UCSZ11);
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
	UCSR1C = UCSR1C &~ (1<<UCSZ12);
 138:	80 81       	ld	r24, Z
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <init_transmission_timer>:
	
	
}
void init_transmission_timer(void)
{
	TCCR0A = TCCR0A &~ (1<<COM0A0);		//Normal Port Operations
 140:	84 b5       	in	r24, 0x24	; 36
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	84 bd       	out	0x24, r24	; 36
	TCCR0A = TCCR0A &~ (1<<COM0A1);
 146:	84 b5       	in	r24, 0x24	; 36
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	84 bd       	out	0x24, r24	; 36
	
	TCCR0A = TCCR0A &~ (1<<WGM00);		//Normal Mode
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	84 bd       	out	0x24, r24	; 36
	TCCR0A = TCCR0A &~ (1<<WGM01);
 152:	84 b5       	in	r24, 0x24	; 36
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	84 bd       	out	0x24, r24	; 36
	TCCR0B = TCCR0B &~ (1<<WGM02);
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	85 bd       	out	0x25, r24	; 37
	
	TCCR0B = TCCR0B &~ (1<<CS00);		//Teiler 256 (16MHz / 256 = 16µs)
 15e:	85 b5       	in	r24, 0x25	; 37
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	85 bd       	out	0x25, r24	; 37
	TCCR0B = TCCR0B &~ (1<<CS01);
 164:	85 b5       	in	r24, 0x25	; 37
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 bd       	out	0x25, r24	; 37
	TCCR0B = TCCR0B | (1<<CS02);
 16a:	85 b5       	in	r24, 0x25	; 37
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 100;	//Compare bei 1,6ms	(16µs * 100 = 1,6ms)
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 = TIMSK0 | (1<<OCIE0A);		//Interrupt nach 1,6ms
 174:	ee e6       	ldi	r30, 0x6E	; 110
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <daten_senden>:
	//TIMSK0 = TIMSK0 | (1<<TOIE0);		//Overflow Interrupt nach 4ms
	
}
void daten_senden(void)
{
	overflow_counter=0;
 180:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	
	sende_daten[0] = temperatur;
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 188:	e5 e0       	ldi	r30, 0x05	; 5
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 83       	st	Z, r24
	sende_daten[1] = sende_daten[1] | voltage;
 18e:	21 81       	ldd	r18, Z+1	; 0x01
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <voltage>
 194:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <voltage+0x1>
 198:	82 2b       	or	r24, r18
 19a:	81 83       	std	Z+1, r24	; 0x01
	sende_daten[2] = sende_daten[2] | (voltage>>8);
 19c:	82 81       	ldd	r24, Z+2	; 0x02
 19e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <voltage>
 1a2:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <voltage+0x1>
 1a6:	83 2b       	or	r24, r19
 1a8:	82 83       	std	Z+2, r24	; 0x02
	
	//Funktioniert nicht mit For schleife ???

	while( !(UCSR1A & (1<<UDRE1)) );	//warten transmission buffer leer
 1aa:	e8 ec       	ldi	r30, 0xC8	; 200
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	85 ff       	sbrs	r24, 5
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <daten_senden+0x2e>
	UDR1 = sende_daten[0];					//Zeichen in Variable ablegen	//UDR1 -> 8 Bit daten 9.Bit wäre in UCSR1B
 1b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sende_daten>
 1b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	while( !(UCSR1A & (1<<UDRE1)) );	//warten transmission buffer leer
 1bc:	e8 ec       	ldi	r30, 0xC8	; 200
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	85 ff       	sbrs	r24, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <daten_senden+0x40>
	UDR1 = sende_daten[1];					//Zeichen in Variable ablegen	//UDR1 -> 8 Bit daten 9.Bit wäre in UCSR1B
 1c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sende_daten+0x1>
 1ca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	while( !(UCSR1A & (1<<UDRE1)) );	//warten transmission buffer leer
 1ce:	e8 ec       	ldi	r30, 0xC8	; 200
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <daten_senden+0x52>
	UDR1 = sende_daten[2];					//Zeichen in Variable ablegen	//UDR1 -> 8 Bit daten 9.Bit wäre in UCSR1B
 1d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sende_daten+0x2>
 1dc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	
	
	
	PORTB = PORTB ^ (1<<PORTB0);
 1e0:	95 b1       	in	r25, 0x05	; 5
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	89 27       	eor	r24, r25
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	08 95       	ret

000001ea <__vector_27>:
	
		
} 
ISR(USART1_TX_vect)     //Interrupt für sender //alle  11,75ms -> 8ms pause + 3*1,25ms (Data)
{	
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
	
	
	TCNT0 = 0;					//nötig um nicht in de overflow zu geraten
 1f4:	16 bc       	out	0x26, r1	; 38
	overflow_counter = 0;		//Counter wird auf 0 gesetzt
 1f6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
}
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	PORTB = PORTB ^ (1<<PORTB1);
 226:	95 b1       	in	r25, 0x05	; 5
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	89 27       	eor	r24, r25
 22c:	85 b9       	out	0x05, r24	; 5
	
	TCNT0 = 0;
 22e:	16 bc       	out	0x26, r1	; 38
	overflow_counter++;
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	if(overflow_counter >= 5)
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	10 f0       	brcs	.+4      	; 0x242 <__vector_21+0x3e>
	{
		daten_senden();
 23e:	0e 94 c0 00 	call	0x180	; 0x180 <daten_senden>
	}
	
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_26>:
ISR(USART1_UDRE_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
	
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:



int main(void)
{
	CLKPR = 0x80;						//Clock prescaler 16MHz
 278:	e1 e6       	ldi	r30, 0x61	; 97
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	80 83       	st	Z, r24
	CLKPR = 0x00;
 280:	10 82       	st	Z, r1

	MCUCR = MCUCR | (1<<JTD);			//JTD Schnittstelle ausschalten für PWM6 Mode
 282:	85 b7       	in	r24, 0x35	; 53
 284:	80 68       	ori	r24, 0x80	; 128
 286:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<JTD);
 288:	85 b7       	in	r24, 0x35	; 53
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	85 bf       	out	0x35, r24	; 53
	
	DDRD = DDRD | (1<<DDD3);
 28e:	53 9a       	sbi	0x0a, 3	; 10
	//PORTD = PORTD | (1<<PORTD3);
	
	
	DDRB = DDRB | (1<<DDB0);
 290:	20 9a       	sbi	0x04, 0	; 4
	PORTB = PORTB | (1<<PORTB0);
 292:	28 9a       	sbi	0x05, 0	; 5

	DDRB = DDRB | (1<<DDB1);
 294:	21 9a       	sbi	0x04, 1	; 4
	PORTB = PORTB | (1<<PORTB1);
 296:	29 9a       	sbi	0x05, 1	; 5
	
	init_usart();				//Initialisierung von Kommunikationsschnittstelle UART
 298:	0e 94 75 00 	call	0xea	; 0xea <init_usart>
	init_transmission_timer();	//Initaliesierung von Timer0 für UART
 29c:	0e 94 a0 00 	call	0x140	; 0x140 <init_transmission_timer>
	
	sei();
 2a0:	78 94       	sei
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <main+0x2a>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
